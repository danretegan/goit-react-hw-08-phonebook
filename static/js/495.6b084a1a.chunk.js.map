{"version":3,"file":"static/js/495.6b084a1a.chunk.js","mappings":"+RAGaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAM,EAG/CC,EAAe,SAAAH,GAAK,OAAIA,EAAMI,MAAO,EAGrCC,EAAc,SAAAL,GAAK,OAAIA,EAAMC,SAASK,KAAM,EAG5CC,EAAkB,SAAAP,GAAK,OAAIA,EAAMC,SAASO,SAAU,EAKpDC,GAAyBC,EAAAA,EAAAA,IACpC,CAACX,EAAgBI,IAGjB,SAACF,EAAUG,GAET,OAAOH,EAASG,QAAO,SAAAO,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASV,EAAOS,cAAc,GAE7D,I,mBCxBWE,EAAYC,EAAAA,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uOAWvBC,EAAQH,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,qEAMpBG,EAAQL,EAAAA,GAAAA,MAAYM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,qEAIpBK,EAAuBP,EAAAA,GAAAA,IAAUQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,8E,GAIxBF,EAAAA,GAAAA,OAAaS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,0H,QCgEnC,EA/EoB,WAClB,IAAAQ,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7Bd,EAAIgB,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA4BJ,EAAAA,EAAAA,UAAS,IAAGK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GAElBG,GAAWC,EAAAA,EAAAA,MACXnC,GAAWoC,EAAAA,EAAAA,IAAYtC,GAqC7B,OACEuC,EAAAA,EAAAA,KAACf,EAAoB,CAAAgB,UACnBC,EAAAA,EAAAA,MAACC,EAAa,CAAAF,SAAA,EACZC,EAAAA,EAAAA,MAACE,EAAS,CAAAH,SAAA,CAAC,SAETD,EAAAA,EAAAA,KAACK,EAAS,CACRC,KAAK,OACLhC,KAAK,OACLiC,YAAY,mBACZC,MAAM,yIACNC,UAAQ,EACRC,MAAOpC,EACPqC,SA/Ce,SAAAC,GACvB,IAAMC,EAAeD,EAAIE,OAAOJ,MAAMK,QAAQ,iBAAkB,IAChEvB,EAAQqB,EACV,QAgDMX,EAAAA,EAAAA,MAACE,EAAS,CAAAH,SAAA,CAAC,WAETD,EAAAA,EAAAA,KAACK,EAAS,CACRC,KAAK,MACLhC,KAAK,SACLiC,YAAY,mBACZC,MAAM,+FACNC,UAAQ,EACRC,MAAOf,EACPgB,SAvDiB,SAAAK,GACzB,IAAMC,EAAiBD,EAAEF,OAAOJ,MAAMK,QACpC,8CACA,IAEFnB,EAAUqB,EACZ,QAqDMjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CAACZ,KAAK,SAASa,OAnDC,WAC3B,IAAMC,EAAazD,EAAS0D,MAC1B,SAAAhD,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBD,EAAKC,aAAa,IAExD+C,EAAe3D,EAAS0D,MAAK,SAAAhD,GAAO,OAAIA,EAAQsB,SAAWA,CAAM,IAEnEyB,EACFG,MAAM,GAADC,OAAIlD,EAAI,6BACJgD,EACTC,MAAM,GAADC,OAAI7B,EAAM,6BACU,KAAhBrB,EAAKmD,QAAmC,KAAlB9B,EAAO8B,SACtC5B,GACE6B,EAAAA,EAAAA,IAAW,CACTpD,KAAMA,EACNqB,OAAQA,KAGZH,EAAQ,IACRI,EAAU,IAEd,EA+ByDK,SAAC,oBAM5D,ECxFA,EAAuB,0BCiCvB,EA1BoB,SAAH0B,GAAqB,IAAftD,EAAOsD,EAAPtD,QACfwB,GAAWC,EAAAA,EAAAA,MAMjB,OACEI,EAAAA,EAAAA,MAAA,OAAK0B,UAAWC,EAAY5B,SAAA,EAC1BC,EAAAA,EAAAA,MAAA,KAAAD,SAAA,EACED,EAAAA,EAAAA,KAAA,UAAAC,SAAS5B,EAAQC,OAAc,MAAE0B,EAAAA,EAAAA,KAAA,SAAM,IAAE3B,EAAQsB,WAEnDK,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CAACC,OATgB,WAC1BtB,GAASiC,EAAAA,EAAAA,IAAczD,EAAQ0D,IACjC,EAOwC9B,SAAC,YACrCD,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CAAAjB,SAAC,WAGd,ECtBaxB,EAAYC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0GAQtBC,EAAQH,EAAAA,GAAAA,GAASI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,mDAKjBoD,EAAWtD,EAAAA,GAAAA,GAASM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,4BAIpBqD,EAAevD,EAAAA,GAAAA,EAAQQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,yBAKvBsD,EAAuBxD,EAAAA,GAAAA,IAAUS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,8E,UCgD9C,EAlDoB,WAClB,IAAMiB,GAAWC,EAAAA,EAAAA,MACXnC,GAAWoC,EAAAA,EAAAA,IAAY5B,GACvBH,GAAQ+B,EAAAA,EAAAA,IAAYhC,GACpBG,GAAY6B,EAAAA,EAAAA,IAAY9B,GAExBkE,EAAsB,SAAAC,GAC1BvC,GAASiC,EAAAA,EAAAA,IAAcM,GACzB,EAMA,OAJAC,EAAAA,EAAAA,YAAU,WACRxC,GAASyC,EAAAA,EAAAA,MACX,GAAG,CAACzC,KAGFK,EAAAA,EAAAA,MAACgC,EAAoB,CAAAjC,SAAA,CAClB/B,IAAa8B,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,IAAK,KACxBrE,IAAcF,IACdgC,EAAAA,EAAAA,KAACwC,EAAa,CAAAvC,UACZD,EAAAA,EAAAA,KAACyC,EAAS,CAAAxC,SACPtC,GAAYA,EAAS+E,OAAS,EAC7B/E,EAASgF,KAAI,SAAAtE,GAAO,OAClB2B,EAAAA,EAAAA,KAAC4C,EAAS,CAAA3C,UACRD,EAAAA,EAAAA,KAAC6C,EAAW,CACVxE,QAASA,EACTyE,gBAAiBX,KAHL9D,EAAQ0D,GAKZ,KAGd/B,EAAAA,EAAAA,KAAA,KAAAC,SAAG,+BAKVjC,IAASgC,EAAAA,EAAAA,KAAC+C,EAAQ,CAAA9C,SAAC,iDAG1B,E,UC1Da+C,EAAOtE,EAAAA,GAAAA,KAAWC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uDAKlBC,EAAQH,EAAAA,GAAAA,MAAYI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,sFAOpBG,EAAQL,EAAAA,GAAAA,MAAYM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,qEAKpBqE,EAAwBvE,EAAAA,GAAAA,IAAUQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,+ECiB/C,EAzBqB,WACnB,IAAMiB,GAAWC,EAAAA,EAAAA,MACXhC,GAASiC,EAAAA,EAAAA,IAAYlC,GAM3B,OACEmC,EAAAA,EAAAA,KAACiD,EAAqB,CAAAhD,UACpBD,EAAAA,EAAAA,KAACgD,EAAI,CAAA/C,UACHC,EAAAA,EAAAA,MAACrB,EAAK,CAAAoB,SAAA,CAAC,yBAELD,EAAAA,EAAAA,KAACjB,EAAK,CACJuB,KAAK,OACLhC,KAAK,SACLoC,MAAO5C,EACP6C,SAbiB,SAAAuC,GACzBrD,GAASsD,EAAAA,EAAAA,GAAUD,EAAMpC,OAAOJ,MAAMe,QACxC,UAiBF,ECZA,MAhBA,WACE,OACEzB,EAAAA,EAAAA,KAAAoD,EAAAA,SAAA,CAAAnD,UACEC,EAAAA,EAAAA,MAACmD,EAAAA,GAAc,CAAApD,SAAA,EACbD,EAAAA,EAAAA,KAACsD,EAAAA,GAAM,CAAArD,UACLD,EAAAA,EAAAA,KAAA,SAAAC,SAAO,iBAETD,EAAAA,EAAAA,KAACuD,EAAW,KACZvD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,eACJD,EAAAA,EAAAA,KAACwD,EAAM,KACPxD,EAAAA,EAAAA,KAACyD,EAAW,QAIpB,C","sources":["redux/selectors.js","components/contactForm/ContactForm.styled.js","components/contactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/contactItem/ContactItem.module.css?e689","components/contactItem/ContactItem.jsx","components/contactList/ContactList.styled.js","components/contactList/ContactList.jsx","components/searchFilter/SearchFilter.styled.js","components/searchFilter/SearchFilter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\n// Selector pentru a obține lista de contacte:\nexport const selectContacts = state => state.contacts.items;\n\n// Selector pentru a obține filtrul:\nexport const selectFilter = state => state.filter;\n\n// Selector pentru a obține eroarea asociată contactelor:\nexport const selectError = state => state.contacts.error;\n\n// Selector pentru a verifica dacă există o încărcare în curs pentru contacte:\nexport const selectIsLoading = state => state.contacts.isLoading;\n\n// ==== Selector pentru a filtra contactele în funcție de șirul de căutare: ====\n\n// Se definește si se exporta un selector numit 'selectFilteredContacts' utilizând createSelector:\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter], // Se specifică inputurile pentru selector (lista de contacte și filtrul)\n\n  // Funcție de filtrare a contactelor:\n  (contacts, filter) => {\n    // Se returneaza o listă de contacte filtrată pe baza șirului de căutare:\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n\n/** Pentru a obține contactele filtrate, cel mai bine este să folosim `createSelector`. Astfel, codul nostru din componenta `contactsList` va fi mai curat, iar selectorul creat cu ajutorul `createSelector` va fi **memorat**, ceea ce înseamnă că recalculează contactele când se schimbă valorile `state.contacts` sau `state.filter`, dar nu și atunci când se fac modificări în alte părți (independente) ale arborelui. */\n","import styled from 'styled-components';\n\nexport const Container = styled.form`\n  align-items: center; /* Align items in the center */\n  border-radius: 8px;\n  border: 1px solid black;\n  box-shadow: inset 0 0 10px black;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 2rem;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\nexport const Input = styled.input`\n  /* Adaugă aici orice stil specific pentru input */\n`;\n\nexport const ContactFormContainer = styled.div`\n  /* Adaugă aici orice stiluri generale pentru ContactForm */\n`;\n\nexport const Button = styled.button`\n  /* Add any styles for the button here */\n  align-self: center; /* Center the button within its container */\n`;\n","import React, { useState } from 'react';\nimport Button from '../Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { selectContacts } from '../../redux/selectors';\nimport {\n  Container as FormContainer,\n  Label as FormLabel,\n  Input as FormInput,\n  ContactFormContainer,\n} from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleNameChange = evt => {\n    const newTextValue = evt.target.value.replace(/[^a-zA-Z\\s'-]/g, '');\n    setName(newTextValue);\n  };\n\n  const handleNumberChange = e => {\n    const newNumberValue = e.target.value.replace(\n      /[^+\\d\\s().-]|^[\\s().-]+|(?<=\\d)[+]|\\b[+]\\b/g,\n      ''\n    );\n    setNumber(newNumberValue);\n  };\n\n  const handleAddButtonClick = () => {\n    const nameExists = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    const numberExists = contacts.some(contact => contact.number === number);\n\n    if (nameExists) {\n      alert(`${name} is already in contacts!`);\n    } else if (numberExists) {\n      alert(`${number} is already in contacts!`);\n    } else if (name.trim() !== '' && number.trim() !== '') {\n      dispatch(\n        addContact({\n          name: name,\n          number: number,\n        })\n      );\n      setName('');\n      setNumber('');\n    }\n  };\n\n  return (\n    <ContactFormContainer>\n      <FormContainer>\n        <FormLabel>\n          Name:\n          <FormInput\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Name and surname\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleNameChange}\n          />\n        </FormLabel>\n\n        <FormLabel>\n          Number:\n          <FormInput\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Telephone number\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleNumberChange}\n          />\n        </FormLabel>\n\n        <Button type=\"button\" action={handleAddButtonClick}>\n          Add contact\n        </Button>\n      </FormContainer>\n    </ContactFormContainer>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactItem_item__8xOFz\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactItem.module.css';\nimport Button from '../Button';\n\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/contacts-operations';\n\nconst ContactItem = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = () => {\n    dispatch(deleteContact(contact.id));\n  };\n\n  return (\n    <div className={styles.item}>\n      <p>\n        <strong>{contact.name}</strong>: <br /> {contact.number}\n      </p>\n      <Button action={handleDeleteContact}>Delete</Button>\n      <Button>Edit</Button>\n    </div>\n  );\n};\n\nContactItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string,\n  }).isRequired,\n};\n\nexport default ContactItem;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  color: black;\n  display: flex;\n  flex-direction: column;\n  font-size: 16px;\n  gap: 1rem;\n`;\n\nexport const Label = styled.ul`\n  list-style-type: none;\n  padding: 0;\n`;\n\nexport const ListItem = styled.li`\n  padding: 10px;\n`;\n\nexport const ErrorMessage = styled.p`\n  color: red;\n`;\n\n// Dacă ai nevoie de stiluri generale pentru componenta ContactList, poți adăuga un container styled components:\nexport const ContactListContainer = styled.div`\n  /* Adaugă aici orice stiluri generale pentru ContactList */\n`;\n","import PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ContactItem from '../contactItem/ContactItem';\nimport {\n  deleteContact,\n  fetchContacts,\n} from '../../redux/contacts/contacts-operations';\nimport {\n  selectError,\n  selectFilteredContacts,\n  selectIsLoading,\n} from '../../redux/selectors';\nimport {\n  Container as ListContainer,\n  Label as ListLabel,\n  ListItem as ListItems,\n  ErrorMessage as ErrorMsg,\n  ContactListContainer,\n} from './ContactList.styled';\nimport { Loader } from 'components/Loader';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectFilteredContacts);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactListContainer>\n      {isLoading && <Loader />}{' '}\n      {!isLoading && !error && (\n        <ListContainer>\n          <ListLabel>\n            {contacts && contacts.length > 0 ? (\n              contacts.map(contact => (\n                <ListItems key={contact.id}>\n                  <ContactItem\n                    contact={contact}\n                    onDeleteContact={handleDeleteContact}\n                  />\n                </ListItems>\n              ))\n            ) : (\n              <p>No contacts available.</p>\n            )}\n          </ListLabel>\n        </ListContainer>\n      )}\n      {error && <ErrorMsg>An error occurred while fetching contacts.</ErrorMsg>}\n    </ContactListContainer>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Label = styled.label`\n  color: black;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\nexport const Input = styled.input`\n  /* Adaugă aici orice stil specific pentru input */\n`;\n\n// Dacă ai nevoie de stiluri generale pentru componenta SearchFilter, poți adăuga un container styled components:\nexport const SearchFilterContainer = styled.div`\n  /* Adaugă aici orice stiluri generale pentru SearchFilter */\n`;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from '../../redux/filter/filter-slice';\nimport { selectFilter } from '../../redux/selectors';\nimport {\n  Form,\n  Label,\n  Input,\n  SearchFilterContainer,\n} from './SearchFilter.styled';\n\nconst SearchFilter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const handleFilterChange = event => {\n    dispatch(setFilter(event.target.value.trim()));\n  };\n\n  return (\n    <SearchFilterContainer>\n      <Form>\n        <Label>\n          Find contact by name:\n          <Input\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={handleFilterChange}\n          />\n        </Label>\n      </Form>\n    </SearchFilterContainer>\n  );\n};\n\nexport default SearchFilter;\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\n\nimport ContactForm from '../components/contactForm/ContactForm';\nimport ContactList from '../components/contactList/ContactList';\nimport Filter from '../components/searchFilter/SearchFilter';\n\nfunction Contacts() {\n  return (\n    <>\n      <HelmetProvider>\n        <Helmet>\n          <title>Phonebook</title>\n        </Helmet>\n        <ContactForm />\n        <h2>Contacts:</h2>\n        <Filter />\n        <ContactList />\n      </HelmetProvider>\n    </>\n  );\n}\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectError","error","selectIsLoading","isLoading","selectFilteredContacts","createSelector","contact","name","toLowerCase","includes","Container","styled","_templateObject","_taggedTemplateLiteral","Label","_templateObject2","Input","_templateObject3","ContactFormContainer","_templateObject4","_templateObject5","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","number","setNumber","dispatch","useDispatch","useSelector","_jsx","children","_jsxs","FormContainer","FormLabel","FormInput","type","placeholder","title","required","value","onChange","evt","newTextValue","target","replace","e","newNumberValue","Button","action","nameExists","some","numberExists","alert","concat","trim","addContact","_ref","className","styles","deleteContact","id","ListItem","ErrorMessage","ContactListContainer","handleDeleteContact","contactId","useEffect","fetchContacts","Loader","ListContainer","ListLabel","length","map","ListItems","ContactItem","onDeleteContact","ErrorMsg","Form","SearchFilterContainer","event","setFilter","_Fragment","HelmetProvider","Helmet","ContactForm","Filter","ContactList"],"sourceRoot":""}